// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faiss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faiss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faiss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faiss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faiss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faiss_2eproto;
namespace faiss {
class Neighbor;
class NeighborDefaultTypeInternal;
extern NeighborDefaultTypeInternal _Neighbor_default_instance_;
class SearchByIdRequest;
class SearchByIdRequestDefaultTypeInternal;
extern SearchByIdRequestDefaultTypeInternal _SearchByIdRequest_default_instance_;
class SearchByIdResponse;
class SearchByIdResponseDefaultTypeInternal;
extern SearchByIdResponseDefaultTypeInternal _SearchByIdResponse_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace faiss
PROTOBUF_NAMESPACE_OPEN
template<> ::faiss::Neighbor* Arena::CreateMaybeMessage<::faiss::Neighbor>(Arena*);
template<> ::faiss::SearchByIdRequest* Arena::CreateMaybeMessage<::faiss::SearchByIdRequest>(Arena*);
template<> ::faiss::SearchByIdResponse* Arena::CreateMaybeMessage<::faiss::SearchByIdResponse>(Arena*);
template<> ::faiss::SearchRequest* Arena::CreateMaybeMessage<::faiss::SearchRequest>(Arena*);
template<> ::faiss::SearchResponse* Arena::CreateMaybeMessage<::faiss::SearchResponse>(Arena*);
template<> ::faiss::Vector* Arena::CreateMaybeMessage<::faiss::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faiss {

// ===================================================================

class Vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {};
  virtual ~Vector();

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faiss_2eproto);
    return ::descriptor_table_faiss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValFieldNumber = 5,
  };
  // repeated float float_val = 5;
  int float_val_size() const;
  private:
  int _internal_float_val_size() const;
  public:
  void clear_float_val();
  private:
  float _internal_float_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_val() const;
  void _internal_add_float_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_val();
  public:
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_val();

  // @@protoc_insertion_point(class_scope:faiss.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_val_;
  mutable std::atomic<int> _float_val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {};
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faiss_2eproto);
    return ::descriptor_table_faiss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kTopKFieldNumber = 2,
  };
  // .faiss.Vector vector = 1;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::faiss::Vector& vector() const;
  ::faiss::Vector* release_vector();
  ::faiss::Vector* mutable_vector();
  void set_allocated_vector(::faiss::Vector* vector);
  private:
  const ::faiss::Vector& _internal_vector() const;
  ::faiss::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::faiss::Vector* vector);
  ::faiss::Vector* unsafe_arena_release_vector();

  // uint64 top_k = 2;
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::uint64 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faiss::Vector* vector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 top_k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class Neighbor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.Neighbor) */ {
 public:
  inline Neighbor() : Neighbor(nullptr) {};
  virtual ~Neighbor();

  Neighbor(const Neighbor& from);
  Neighbor(Neighbor&& from) noexcept
    : Neighbor() {
    *this = ::std::move(from);
  }

  inline Neighbor& operator=(const Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neighbor& operator=(Neighbor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Neighbor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neighbor* internal_default_instance() {
    return reinterpret_cast<const Neighbor*>(
               &_Neighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Neighbor& a, Neighbor& b) {
    a.Swap(&b);
  }
  inline void Swap(Neighbor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Neighbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Neighbor* New() const final {
    return CreateMaybeMessage<Neighbor>(nullptr);
  }

  Neighbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Neighbor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Neighbor& from);
  void MergeFrom(const Neighbor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.Neighbor";
  }
  protected:
  explicit Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faiss_2eproto);
    return ::descriptor_table_faiss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.Neighbor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {};
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faiss_2eproto);
    return ::descriptor_table_faiss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 2,
  };
  // repeated .faiss.Neighbor neighbors = 2;
  int neighbors_size() const;
  private:
  int _internal_neighbors_size() const;
  public:
  void clear_neighbors();
  ::faiss::Neighbor* mutable_neighbors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
      mutable_neighbors();
  private:
  const ::faiss::Neighbor& _internal_neighbors(int index) const;
  ::faiss::Neighbor* _internal_add_neighbors();
  public:
  const ::faiss::Neighbor& neighbors(int index) const;
  ::faiss::Neighbor* add_neighbors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
      neighbors() const;

  // @@protoc_insertion_point(class_scope:faiss.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor > neighbors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchByIdRequest) */ {
 public:
  inline SearchByIdRequest() : SearchByIdRequest(nullptr) {};
  virtual ~SearchByIdRequest();

  SearchByIdRequest(const SearchByIdRequest& from);
  SearchByIdRequest(SearchByIdRequest&& from) noexcept
    : SearchByIdRequest() {
    *this = ::std::move(from);
  }

  inline SearchByIdRequest& operator=(const SearchByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByIdRequest& operator=(SearchByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchByIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchByIdRequest* internal_default_instance() {
    return reinterpret_cast<const SearchByIdRequest*>(
               &_SearchByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchByIdRequest& a, SearchByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchByIdRequest* New() const final {
    return CreateMaybeMessage<SearchByIdRequest>(nullptr);
  }

  SearchByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchByIdRequest& from);
  void MergeFrom(const SearchByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchByIdRequest";
  }
  protected:
  explicit SearchByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faiss_2eproto);
    return ::descriptor_table_faiss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTopKFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 top_k = 2;
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::uint64 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.SearchByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 top_k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_2eproto;
};
// -------------------------------------------------------------------

class SearchByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss.SearchByIdResponse) */ {
 public:
  inline SearchByIdResponse() : SearchByIdResponse(nullptr) {};
  virtual ~SearchByIdResponse();

  SearchByIdResponse(const SearchByIdResponse& from);
  SearchByIdResponse(SearchByIdResponse&& from) noexcept
    : SearchByIdResponse() {
    *this = ::std::move(from);
  }

  inline SearchByIdResponse& operator=(const SearchByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByIdResponse& operator=(SearchByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchByIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchByIdResponse* internal_default_instance() {
    return reinterpret_cast<const SearchByIdResponse*>(
               &_SearchByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchByIdResponse& a, SearchByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchByIdResponse* New() const final {
    return CreateMaybeMessage<SearchByIdResponse>(nullptr);
  }

  SearchByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchByIdResponse& from);
  void MergeFrom(const SearchByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss.SearchByIdResponse";
  }
  protected:
  explicit SearchByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faiss_2eproto);
    return ::descriptor_table_faiss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .faiss.Neighbor neighbors = 2;
  int neighbors_size() const;
  private:
  int _internal_neighbors_size() const;
  public:
  void clear_neighbors();
  ::faiss::Neighbor* mutable_neighbors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
      mutable_neighbors();
  private:
  const ::faiss::Neighbor& _internal_neighbors(int index) const;
  ::faiss::Neighbor* _internal_add_neighbors();
  public:
  const ::faiss::Neighbor& neighbors(int index) const;
  ::faiss::Neighbor* add_neighbors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
      neighbors() const;

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:faiss.SearchByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor > neighbors_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// repeated float float_val = 5;
inline int Vector::_internal_float_val_size() const {
  return float_val_.size();
}
inline int Vector::float_val_size() const {
  return _internal_float_val_size();
}
inline void Vector::clear_float_val() {
  float_val_.Clear();
}
inline float Vector::_internal_float_val(int index) const {
  return float_val_.Get(index);
}
inline float Vector::float_val(int index) const {
  // @@protoc_insertion_point(field_get:faiss.Vector.float_val)
  return _internal_float_val(index);
}
inline void Vector::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:faiss.Vector.float_val)
}
inline void Vector::_internal_add_float_val(float value) {
  float_val_.Add(value);
}
inline void Vector::add_float_val(float value) {
  _internal_add_float_val(value);
  // @@protoc_insertion_point(field_add:faiss.Vector.float_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector::_internal_float_val() const {
  return float_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector::float_val() const {
  // @@protoc_insertion_point(field_list:faiss.Vector.float_val)
  return _internal_float_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector::_internal_mutable_float_val() {
  return &float_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:faiss.Vector.float_val)
  return _internal_mutable_float_val();
}

// -------------------------------------------------------------------

// SearchRequest

// .faiss.Vector vector = 1;
inline bool SearchRequest::_internal_has_vector() const {
  return this != internal_default_instance() && vector_ != nullptr;
}
inline bool SearchRequest::has_vector() const {
  return _internal_has_vector();
}
inline void SearchRequest::clear_vector() {
  if (GetArena() == nullptr && vector_ != nullptr) {
    delete vector_;
  }
  vector_ = nullptr;
}
inline const ::faiss::Vector& SearchRequest::_internal_vector() const {
  const ::faiss::Vector* p = vector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::faiss::Vector*>(
      &::faiss::_Vector_default_instance_);
}
inline const ::faiss::Vector& SearchRequest::vector() const {
  // @@protoc_insertion_point(field_get:faiss.SearchRequest.vector)
  return _internal_vector();
}
inline void SearchRequest::unsafe_arena_set_allocated_vector(
    ::faiss::Vector* vector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_);
  }
  vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss.SearchRequest.vector)
}
inline ::faiss::Vector* SearchRequest::release_vector() {
  auto temp = unsafe_arena_release_vector();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss::Vector* SearchRequest::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:faiss.SearchRequest.vector)
  
  ::faiss::Vector* temp = vector_;
  vector_ = nullptr;
  return temp;
}
inline ::faiss::Vector* SearchRequest::_internal_mutable_vector() {
  
  if (vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss::Vector>(GetArena());
    vector_ = p;
  }
  return vector_;
}
inline ::faiss::Vector* SearchRequest::mutable_vector() {
  // @@protoc_insertion_point(field_mutable:faiss.SearchRequest.vector)
  return _internal_mutable_vector();
}
inline void SearchRequest::set_allocated_vector(::faiss::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:faiss.SearchRequest.vector)
}

// uint64 top_k = 2;
inline void SearchRequest::clear_top_k() {
  top_k_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchRequest::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchRequest::top_k() const {
  // @@protoc_insertion_point(field_get:faiss.SearchRequest.top_k)
  return _internal_top_k();
}
inline void SearchRequest::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  top_k_ = value;
}
inline void SearchRequest::set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:faiss.SearchRequest.top_k)
}

// -------------------------------------------------------------------

// Neighbor

// uint64 id = 1;
inline void Neighbor::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Neighbor::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Neighbor::id() const {
  // @@protoc_insertion_point(field_get:faiss.Neighbor.id)
  return _internal_id();
}
inline void Neighbor::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Neighbor::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:faiss.Neighbor.id)
}

// float score = 2;
inline void Neighbor::clear_score() {
  score_ = 0;
}
inline float Neighbor::_internal_score() const {
  return score_;
}
inline float Neighbor::score() const {
  // @@protoc_insertion_point(field_get:faiss.Neighbor.score)
  return _internal_score();
}
inline void Neighbor::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Neighbor::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:faiss.Neighbor.score)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .faiss.Neighbor neighbors = 2;
inline int SearchResponse::_internal_neighbors_size() const {
  return neighbors_.size();
}
inline int SearchResponse::neighbors_size() const {
  return _internal_neighbors_size();
}
inline void SearchResponse::clear_neighbors() {
  neighbors_.Clear();
}
inline ::faiss::Neighbor* SearchResponse::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:faiss.SearchResponse.neighbors)
  return neighbors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
SearchResponse::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:faiss.SearchResponse.neighbors)
  return &neighbors_;
}
inline const ::faiss::Neighbor& SearchResponse::_internal_neighbors(int index) const {
  return neighbors_.Get(index);
}
inline const ::faiss::Neighbor& SearchResponse::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:faiss.SearchResponse.neighbors)
  return _internal_neighbors(index);
}
inline ::faiss::Neighbor* SearchResponse::_internal_add_neighbors() {
  return neighbors_.Add();
}
inline ::faiss::Neighbor* SearchResponse::add_neighbors() {
  // @@protoc_insertion_point(field_add:faiss.SearchResponse.neighbors)
  return _internal_add_neighbors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
SearchResponse::neighbors() const {
  // @@protoc_insertion_point(field_list:faiss.SearchResponse.neighbors)
  return neighbors_;
}

// -------------------------------------------------------------------

// SearchByIdRequest

// uint64 id = 1;
inline void SearchByIdRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchByIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdRequest.id)
  return _internal_id();
}
inline void SearchByIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void SearchByIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:faiss.SearchByIdRequest.id)
}

// uint64 top_k = 2;
inline void SearchByIdRequest::clear_top_k() {
  top_k_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchByIdRequest::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchByIdRequest::top_k() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdRequest.top_k)
  return _internal_top_k();
}
inline void SearchByIdRequest::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  top_k_ = value;
}
inline void SearchByIdRequest::set_top_k(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:faiss.SearchByIdRequest.top_k)
}

// -------------------------------------------------------------------

// SearchByIdResponse

// uint64 request_id = 1;
inline void SearchByIdResponse::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchByIdResponse::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SearchByIdResponse::request_id() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdResponse.request_id)
  return _internal_request_id();
}
inline void SearchByIdResponse::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void SearchByIdResponse::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:faiss.SearchByIdResponse.request_id)
}

// repeated .faiss.Neighbor neighbors = 2;
inline int SearchByIdResponse::_internal_neighbors_size() const {
  return neighbors_.size();
}
inline int SearchByIdResponse::neighbors_size() const {
  return _internal_neighbors_size();
}
inline void SearchByIdResponse::clear_neighbors() {
  neighbors_.Clear();
}
inline ::faiss::Neighbor* SearchByIdResponse::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:faiss.SearchByIdResponse.neighbors)
  return neighbors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >*
SearchByIdResponse::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:faiss.SearchByIdResponse.neighbors)
  return &neighbors_;
}
inline const ::faiss::Neighbor& SearchByIdResponse::_internal_neighbors(int index) const {
  return neighbors_.Get(index);
}
inline const ::faiss::Neighbor& SearchByIdResponse::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdResponse.neighbors)
  return _internal_neighbors(index);
}
inline ::faiss::Neighbor* SearchByIdResponse::_internal_add_neighbors() {
  return neighbors_.Add();
}
inline ::faiss::Neighbor* SearchByIdResponse::add_neighbors() {
  // @@protoc_insertion_point(field_add:faiss.SearchByIdResponse.neighbors)
  return _internal_add_neighbors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss::Neighbor >&
SearchByIdResponse::neighbors() const {
  // @@protoc_insertion_point(field_list:faiss.SearchByIdResponse.neighbors)
  return neighbors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faiss

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faiss_2eproto
